#!/usr/bin/env python3

import sys
import tarfile
import os
import shutil
import subprocess
from config import (
    MONGO_HOST,
    MONGO_PORT,
    USERNAME,
    PASSWORD,
    ADMIN_DB,
    DB_NAME,
    COLLECTION_NAME,
)

try:
    import gdown
    from pymongo import MongoClient, ASCENDING, IndexModel
except ImportError as e:
    print(
        "To continue, please execute the following command to install necessary dependencies: 'pip install pymongo gdown'"
    )
    sys.exit(1)

SUCCESS_COLOR = "\033[92m"
ERROR_COLOR = "\033[91m"
RESET_COLOR = "\033[0m"
GOOGLE_DRIVE_FILE_ID = "1QKUBqEPwM_iV5fWM4tQ-t_GlGx__UqwI"
GOOGLE_DRIVE_FILENAME = "flights.tar.bz2"
DESTINATION_FOLDER = "data"


def ensure_directories_cleaned(*directories, clear_content=False):
    for directory in directories:
        if os.path.exists(directory):
            if clear_content:
                for filename in os.listdir(directory):
                    file_path = os.path.join(directory, filename)
                    if os.path.isfile(file_path) or os.path.islink(file_path):
                        os.unlink(file_path)
                    elif os.path.isdir(file_path):
                        shutil.rmtree(file_path)
            else:
                shutil.rmtree(directory)


def build_mongodb_uri(username, password, host, port, db_name):
    if username and password:
        credentials = f"{username}:{password}@"
        auth_source = "?authSource={ADMIN_DB}"
    else:
        credentials = ""
        auth_source = ""

    return f"mongodb://{credentials}{host}:{port}/{db_name}{auth_source}"


MONGODB_URI = build_mongodb_uri(USERNAME, PASSWORD, MONGO_HOST, MONGO_PORT, DB_NAME)


def download_file_from_google_drive(destination_path):
    url = f"https://drive.google.com/uc?id={GOOGLE_DRIVE_FILE_ID}"
    gdown.download(url, destination_path, quiet=True)


def extract_bz2_file(file_path, target_path):
    os.makedirs(target_path, exist_ok=True)
    with tarfile.open(file_path, "r:bz2") as file:
        file.extractall(path=target_path)


def create_indexes(collection):
    index_models = [
        IndexModel([("dest.state", ASCENDING), ("year", ASCENDING)], name="query5"),
        IndexModel(
            [
                ("arr_delay", ASCENDING),
                ("dest.code", ASCENDING),
                ("year", ASCENDING),
                ("month", ASCENDING),
            ],
            name="query3/4",
        ),
        IndexModel(
            [
                ("has_delay", ASCENDING),
                ("carrier.airline", ASCENDING),
                ("year", ASCENDING),
                ("carrier_delay", ASCENDING),
                ("late_aircraft_delay", ASCENDING),
                ("nas_delay", ASCENDING),
                ("weather_delay", ASCENDING),
            ],
            name="query2",
        ),
        IndexModel([("year", ASCENDING)], name="query1"),
    ]
    try:
        results = collection.create_indexes(index_models)
        for result in results:
            print(f"{SUCCESS_COLOR}Index created: {result}{RESET_COLOR}")
    except Exception as e:
        print(f"{ERROR_COLOR}Failed to create indexes: {e}{RESET_COLOR}")


def mongoimport_data(json_file_path, uri, db_name, collection_name):
    command = [
        "mongoimport",
        "--uri",
        uri,
        "--db",
        db_name,
        "--collection",
        collection_name,
        "--file",
        json_file_path,
        "--type=json",
    ]
    try:
        subprocess.run(command, capture_output=True, text=True, check=True)
        print(f"{SUCCESS_COLOR}Mongo import completed.{RESET_COLOR}")
    except subprocess.CalledProcessError as e:
        print(
            f"{ERROR_COLOR}Error: Return code {e.returncode}, {e.stderr}{RESET_COLOR}"
        )


def main():
    print("Preparing folders before execution ...")
    ensure_directories_cleaned("__extract__", "__pycache__")
    ensure_directories_cleaned("data", clear_content=True)
    print(f"{SUCCESS_COLOR}Preparing completed.{RESET_COLOR}")

    print(f"Downloading {GOOGLE_DRIVE_FILENAME} ...")
    try:
        destination = os.path.join(os.getcwd(), DESTINATION_FOLDER)
        full_destination_path = os.path.join(destination, GOOGLE_DRIVE_FILENAME)
        download_file_from_google_drive(full_destination_path)

        if not os.path.exists(full_destination_path):
            print(
                f"{ERROR_COLOR}Download error. File not found after download attempt.{RESET_COLOR}"
            )
            return

        print(f"{SUCCESS_COLOR}Download completed.{RESET_COLOR}")
        print(f"Starting {GOOGLE_DRIVE_FILENAME} extraction ...")
        extract_bz2_file(full_destination_path, "__extract__")
        print(f"{SUCCESS_COLOR}Extraction completed.{RESET_COLOR}")

        json_file_path = os.path.join(os.getcwd(), "__extract__", "flights.json")

        if not os.path.isfile(json_file_path):
            print(f"{ERROR_COLOR}File {json_file_path} does not exist.{RESET_COLOR}")
            return

        print("Starting MongoDB import ...")
        mongoimport_data(json_file_path, MONGODB_URI, DB_NAME, COLLECTION_NAME)

        with MongoClient(MONGODB_URI) as client:
            db = client[DB_NAME]
            collection = db[COLLECTION_NAME]

            print("Creating MongoDB indexes ...")
            create_indexes(collection)

        print("Cleaning up after execution ...")
        ensure_directories_cleaned("__extract__", "__pycache__")
        ensure_directories_cleaned("data", clear_content=True)
        print(f"{SUCCESS_COLOR}Clean up completed.{RESET_COLOR}")

    except Exception as e:
        print(f"{ERROR_COLOR}Project failed: {e}{RESET_COLOR}")


if __name__ == "__main__":
    main()
